install.packages("shiny", dep=T)
install.packages("devtools", dep=T)
install.packages("agricolae", dep=T)
install.packages(c("nlme", "survival"))
install.packages("devtools")
install.packages("shiny")
install.packages("shinyBS")
install.packages("profview")
devtools::install_github("c5sire/fbcollect")
install.packages(c("backports", "chron", "data.table", "date", "dendextend", "digest", "jsonlite", "jug", "leaflet", "Matrix", "mclust", "mgcv", "nlme", "profvis", "Rcpp", "roxygen2", "rprojroot", "RSelenium", "shiny", "spdep", "stringr"))
install.packages(c("ggpubr", "shinyFiles", "V8"))
install.packages(c("ggpubr", "shinyFiles", "V8"))
install.packages("V8")
install.packages("V8")
install.packages("V8")
install.packages("V8")
install.packages("Rcpp", lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("V8")
install.packages(c("cluster", "infuser", "mclust", "pbkrtest", "SparseM", "survival"), lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("RcppGSL")
library(RcppGSL)
require(Rcpp)                           # load Rcpp
sourceCpp("bSpline.cpp")                # compile two functions
dat <- genData()                        # generate the data
fit <- fitData(dat)                     # fit the model, returns matrix and gof measures
X <- fit[["X"]]                         # extract vectors
Y <- fit[["Y"]]
op <- par(mar=c(3,3,1,1))
plot(dat[,"x"], dat[,"y"], pch=19, col="#00000044")
lines(X, Y, col="orange", lwd=2)
par(op)
library(RcppG)
library(Rcpp)
require(Rcpp)                           # load Rcpp
sourceCpp("bSpline.cpp")                # compile two functions
dat <- genData()                        # generate the data
fit <- fitData(dat)                     # fit the model, returns matrix and gof measures
X <- fit[["X"]]                         # extract vectors
Y <- fit[["Y"]]
op <- par(mar=c(3,3,1,1))
plot(dat[,"x"], dat[,"y"], pch=19, col="#00000044")
lines(X, Y, col="orange", lwd=2)
par(op)
hidap::start()
librar(RMySQL)
library(RMySQL)
library(RMySQL)
library(DBI)
m <- dbDriver("MySQL");
con <- dbConnect(m,user='dspotatotrials',password='ca7H=j~$V+p2G0715',host='176.34.248.121',dbname='datacippotato_martpot_trials');
11000/3.2/*.8
11000/3.2/*0.8
11000/3.2
11000/3.2*0.8
11000/3.2
install.packages("tidyverse")
library(xtable)
install.packages("xtable")
install.packages("knitr")
sample
sample.int
?sample
install.packages(c("dplyr", "gridExtra", "mgcv", "psych", "rstudioapi"))
install.packages("pinp")
?pinp
install.packages("rticles")
install.packages("crayon")
installed.packages("keras")
install.packages("keras")
install.packages("randomForestExplainer")
install.packages("ggJoy")
install.packages("ggjoy")
install.packages("ggplotgui")
devtools::install_github("ropensci/plotly")
devtools::install_github("kent37/summarywidget")
install.packages("caret")
install.packages(c("curl", "data.table", "odbc", "RcppArmadillo", "rgdal", "rJava", "tfruns", "tidyselect"))
library(shinytest)
install.packages("ISLR")
library(ISLR)
library(caret)
data(Wage)
summary(Wage)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
train = createDataPartition(diagnosis, p = 0.50,list=FALSE)
library(caret)
adData = data.frame(diagnosis,predictors)
train = createDataPartition(diagnosis, p = 0.50,list=FALSE)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
plot(concrete$CompressiveStrength)
plot(concrete$CompressiveStrength, row(concrete))
idx = 1:nrow(concrete)
plot(idx, concrete$CompressiveStrength)
library(Hmisc)
qplot(idx, concrete$CompressiveStrength)
vAge <- cut2(concrete$Age)
View(concrete)
qplot(idx, concrete$CompressiveStrength, color=vAge)
vAsh <- cut2(concrete$FlyAsh)
qplot(idx, concrete$CompressiveStrength, color=vAsh)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(concrete$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
str(AlzheimerDisease)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
install.packages(c("rattle", "rpart"))
install.packages(c("tree", "partly"))
install.packages(c("rattle", "rpart"))
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
install.packages("pgmm")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages(c("checkmate", "data.table", "debugme", "irlba", "ISLR", "purrr", "rex", "rJava", "tidyr"))
epx(7)
exp(7)
exp(7)
?exp
nom = 1e7
nom
nom = 1e7 + 1e-7.5 + 1e10
nom = 1e7 + 1e(-7.5) + 1e10
nom = 1e7 + 0 + 1e10
nom
7/ nom
install.packages("softmax")
install.packages("sigmoid")
library(sigmoid)
SoftMax(c(1, -2, .5))
SoftMax(c(1, -2, 0.5))
?SoftMax
SoftMax(c(1, -2, 0.5), 1)
install.packages(c("BANOVA", "blogdown", "covr", "dendextend", "devtools", "geosphere", "lintr", "lubridate", "openssl", "pinp", "raster", "rgbif", "rgeos", "rlang", "rmarkdown", "robustbase", "servr", "sparklyr", "tidyselect", "tidyverse", "withr"))
install.packages(c("hms", "Matrix", "mclust", "mgcv", "Rcpp", "RcppEigen", "recipes", "reticulate", "rgdal"))
library(learnr)
install.packages("bookdownplus")
install.packages(c("blogdown", "caret", "iterators", "reshape2"))
install.packages("usethis")
install.packages(c("backports", "digest", "git2r", "htmlTable", "keras", "knitr", "lme4", "MASS", "RCurl", "rlang", "rprojroot", "rstan", "StanHeaders", "tensorflow", "testthat", "tfruns", "tibble", "visNetwork", "withr", "xts"))
setwd("~/Documents/projects/blog2")
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::build_site()
blogdown:::update_meta_addin()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown::build_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown::build_site()
blogdown::build_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown::build_site()
blogdown::build_site()
blogdown::serve_site()
blogdown:::serve_site()
